/***************
Agenda
***************/
- Why?
- Transpilers
- Set Up Babel

/***************
Why?
***************/
ECMAScript Versions

/***************
Transpilers
***************/
Babel -
(Modern, standards
-based JS, today)

pros:
Write standardized JS
Leverage full JS Ecosystem
Use experimental features earlier
No type defs, annotations required
ES6 imports are statically analyzable
Test, Lint, Babel, Great libs


Transcript -
(Superset of JavaScript
Enhanced
autocompletion
Safer refactoring
Clearer intent)

pros:
Enhanced Autocomplete
Enhanced readability
Safer refactoring
Additional non-standard features

Elm -
(Compiles down to JS
Clean Syntax
Immutable data structures
Friendly errors
All errors are compile-time errors
Interops with JS)


/***************
Babel Set Up
***************/

/**** Babel Configuration Styles *****/

.babelrc
Not npm specific
Easier to read since isolated

//OR...
package.json
One less file in your project
{
    "name": "my-package",
    "version": "1.0.0",
    "babel": {
        //my config here
    }
}

/**** Build Script JS Style *****/

ES5
No waiting for transpile = faster
No transpilerdependency

Transpiled
Enjoy the latest features
Consistent coding style
Use the same lintingrules everywhere
Can eventually remove transpiler

/***************
DEMO: Babel Set Up
***************/

/*** already npm installed ***/

/*** create .babelrc ***/
{
    "presets": [
        "latest"
    ]
}

/*** adjust the scripts so we js files can transpiled if they have ES6 Codes ***/
"scripts": {
    "prestart": "babel-node buildScripts/startMessage.js",
    "start": "npm-run-all --parallel open:src",
    "open:src": "babel-node buildScripts/srcServer.js",
    "localtunnel": "lt --port 3000",
    "share": "npm-run-all --parallel open:src localtunnel"
},

/*** startMessage.js and srcServer.js were adjusted to have ES6 codes ***/



