/*************
AGENDA
************/
Minification - to speed page loads
Sourcemaps - support debugging in production
Dynamic HTML - production specific concerns
Cache busting - user receive the latest version of the code upon deployment
Bundle splitting - user dont have to download all the application for minor changes.
Error logging - when bug sneak into production

/*************
Minification
************/
{
    Shortens variable and function names
    Removes comments
    Removes whitespace and new lines
    Dead code elimination / Tree-shaking
    Debug via sourcemap
}
/*************
DEMO: Production Webpack Configuration with Minification
************/

//create Webpack.config.prod.js
// the UglifyJsPlugin does the minification
// it's imported via webpack and used as a plugin.
// the DudupePlugin is also used to eliminate duplicate packages when generating the bundle.

{
  import path from 'path';
  import webpack from "webpack";

  export default {
    debug: true,
    devtool: 'source-map', // recommeded for productiom, this specifes how source would be generated; so we can original code even after minificatuion
    noInfo: false,
    entry: [
      path.resolve(__dirname, 'src/index')
    ],
    target: 'web',
    output: {
      path: path.resolve(__dirname, 'dist'), // where to write the output.
      publicPath: '/',
      filename: 'bundle.js'
    },
    plugins: [
      //Eliminate duplicate packages when generating bundle
      new webpack.optimize.DedupePlugin(),

      //Minify JS
      new webpack.optimize.UglifyJsPlugin(),
    ],
    module: {
      loaders: [
        {test: /\.js$/, exclude: /node_modules/, loaders: ['babel']},
        {test: /\.css$/, loaders: ['style','css']}
      ]
    }
  };
}

//then write a script (buildScripts/build.js) that run the webpack build for production.
{
    /*eslint-disable no-console */
    import webpack from 'webpack';
    import webpackConfig from '../webpack.config.prod';
    import chalk from 'chalk';

    process.env.NODE_ENV = 'production';
    // (optional for here.), important if you create a dev specific config for babel in .babelrc file
    // babel and other libraries look for for this variable to determine how they are built

    webpack(webpackConfig).run((err, stats) => {
    if (err) {//so a fatal error occrued here.
        console.log(chalk.red(err));
        return 1;
    }
    const jsonStats = stats.toJson();

    if (jsonStats.hasErrors) {
        return jsonStats.errors.map(error => console.log(chalk.red(error)));
    }

    if (jsonStats.hasWarnings) {
        console.log(chalk.yellow('Webpack generated the following warnings: '));
        jsonStats.warnings.map(warning => console.log(chalk.yelllow(warning)));
    }

    console.log(`Webpack stats: ${stats}`);

    //if we get this far, the build succeeded.
    console.log(chalk.green('Your app has been built for production and written to /dist!'))

    return 0;
    });

}



/******************************
NOT FOR USE IN ACTUAL PRODUCTION USE.
distServer.js is just useful for hosting the minifed production build for
local debugging puposes.

Then we can move files to serve them on some host

How to run the final production version of the app in my local machine
just to make sure everything looks good
******************************/

{
  import express from 'express';
  import path from 'path';
  import open from 'open';
  import compression from 'compression';

  /*eslint-disable no-console */

  const port = 3000;
  const app = express();

  //enable gzip, to see size
  app.use(compression());


  //support to express for serving static files
  app.use(express.static('dist'));

  // index.html comes from the dist server rather from the src folder
  app.get ('/', function (req, res){
      res.sendFile(path.join(__dirname, '../dist/index.html'));
  });

  app.listen(port, function(err){
      if (err){
          console.log(err);
      } else {
          open('http://localhost:' + port)
      }
  });

}

// what production api should you use
{
  export default function getBaseUrl (){
    return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : 'https://shrouded-refuge-41310.herokuapp.com/';
  }

  function getQueryStringParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }

}

/**************
npm scripts to automate the production build scripts.
**************/
{
  "clean-dist": "rimraf ./dist && mkdir dist",
  "prebuild": "npm-run-all clean-dist test lint",
  "build": "babel-node buildScripts/build.js",
  "postbuild": "babel-node buildScripts/distServer.js",
}

/**************
Dynamic HTML During Build
**************/
Why Manipulate HTML for Production?
Reference bundles automatically
Handle dynamic bundle names
Inject production only resources
Minify

Referencing Bundled Assets in HTML
Hard code
Manipulate via Node: add some other code to production
html-webpack-plugin: : add some other code to production, cache busting and other stuffs

/**************
DEMO: Dynamic HTML During Build
**************/
// html-webpack-plugin

//in both webpack.config.prod.js and webpack.config.dev.js

// add the import
import HtmlWebpackPlugin from 'html-webpack-plugin';
// add the plugin
//create html file that includes reference to bundled JS
    new HtmlWebpackPlugin ({
      template: 'src/index.html', //reference to our html in development
      inject: true, //so we delete the script tag in html in dev since this plugin would inject the script
    }),

/**************
DEMO: Add minification to Dynamic HTML During Build
**************/

// the plugin in webpack.config.prod.js improves

//create html file that includes reference to bundled JS
    new HtmlWebpackPlugin ({
      template: 'src/index.html',
      minify: { //for minification of the dynamic generated html file
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttribute: true,
        keepClosingSlash: true,
        minifyJs: true,
        minifyCSS: true,
        minifyURLs: true
      },
      inject: true, //so we delete the script tag in html since the scrip would be injected
      trackJsToken: trackJsToken()
    }),

/**************
Bundle Splitting
**************/
Why?
Speed initial page load
Avoid re-downloading all libraries

//Bundle splitting with Webpack
//option: split bundle per page; split per libraries - third party from others.

// the plugin in webpack.config.prod.js improves

// change entry point
entry: {
    vendor: path.resolve(__dirname, 'src/vendor'),
    main: path.resolve(__dirname, 'src/index')
  },

// create file along this the path in vendor: path.resolve(__dirname, 'src/vendor')
// bundles to vendor.js.

/* This file contains reference to the vendor libraries we are usng in this project.
This is used by webpack in the
production build only. A separate bundle for vendor code is useful since it's unlikely
to change as often as the application code. So all the library we reference
here will be wrtten to vendor.js so they can be chached untile one of them changes
So basically re-downloading a huge js file anytime a line of
code changes. Any files that arent referenced here will be bundled  into main.js for the
production */

/* eslint-disable no-unused-vars */
import fetch from 'whatwg-fetch';

// add more plugin in the webpack.config.prod.js

//Use CommonChunckPlugin to create a separate bundle
//of vendor libraries so that they are cached separately
new webpack.optimize.CommonsChunkPlugin ({
  name: 'vendor' //value of name is the sme as the entry point
}),

// update the filename output name to have dynamic names

filename: '[name].[chunkhash].js'


/**************
Error Logging
**************/

/*** Options ***/
{
  TrackJS
  Sentry
  New Relic
  Raygun
}

/*** JS Error Logging: What to Look For ***/
{
    Error Metadata
      -  Browser
      -  Stack trace
      -  Previous actions
      -  Custom API for enhanced tracking
  Notifications & integrations
  Analytics and filtering
  Pricing
}

paste the necessary code in the html.
run necessary code so that it runs only n production.

{
  define pp in the htmlwebpackplugin to make it avaliable in index.html
  using htmlwebpackplugin.options.varName
  so we can have:
  trackJSToken: #code
}
{
  <% if (htmlWebpackPlugin.options.trackJsToken){ %>
  <!-- BEGIN TRACK -->
        <script src="https://cdn.trackjs.com/agent/v3/latest/t.js"></script>
        <script>
        window.TrackJS && TrackJS.install({
            token: '<%=htmlWebpackPlugin.options.trackJsToken%>'
            // for more configuration options, see https://docs.trackjs.com
        });
        </script>
        <!-- END TRACK -->
  <% } %>
}


